#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <locale.h>
#define NUM_OF_USERS 10
float bit = 342.089;
float rip =  3.18;
float eth = 12.980;
char cpf[12];
char senha[6];
char cpf_lista[NUM_OF_USERS][12];
char senha_lista[NUM_OF_USERS][7];
float carteira[NUM_OF_USERS]={};
float carteiraBit[NUM_OF_USERS]={};
float carteiraEth[NUM_OF_USERS]={};
float carteiraXrp[NUM_OF_USERS]={};
int indice;
int i = 0;


void menu ();
void Efetuar_login ();
void mostrarSaldo  ();
void Consultar_extrato  ();
void Depositar_reais ();
void Sacar_reais ();
void Comprar_criptomoedas ();
void Vender_criptomoedas ();
void Atualizar_cotacao ();
void Cotacao_inicial ();

//CARREGAMENTO DOS ARQUIVOS.
void iniciacao_arquivos() {
   FILE *cpfss = fopen("cpfs.bin", "r"); // Open the binary file in read mode


    for (i = 0; i < NUM_OF_USERS && fgets(cpf_lista[i], 13, cpfss) != NULL; i++) {
       
        cpf_lista[i][strcspn(cpf_lista[i], "\n")] = 0;
    }

    fclose(cpfss); 
  FILE *senhass = fopen("senhas.bin", "r"); // Open the binary file in read mode


    for (i = 0; i < NUM_OF_USERS && fgets(senha_lista[i], 13, senhass) != NULL; i++) {
       
        senha_lista[i][strcspn(senha_lista[i], "\n")] = 0;
    }

    fclose(senhass); 

//iniciação dos saldos agora
     FILE *carteirafile;
     FILE *carteirabitfile;
     FILE *carteiraethfile;
     FILE *carteiraxrpfile;
     
     carteirafile = fopen("saldo.bin","rb");
     size_t lendo = fread(carteira, sizeof(float),10,carteirafile);
     fclose(carteirafile);

    carteirabitfile = fopen("saldobit.bin","rb");
     size_t lendobit = fread(carteiraBit, sizeof(float),10,carteirabitfile);
     fclose(carteirabitfile);
    carteiraethfile = fopen("saldoeth.bin","rb");
     size_t lendoeth = fread(carteiraEth, sizeof(float),10,carteiraethfile);
     fclose(carteiraethfile);
    carteiraxrpfile = fopen("saldoxrp.bin","rb");
     size_t lendoxrp = fread(carteiraXrp, sizeof(float),10,carteiraxrpfile);
     fclose(carteiraxrpfile);

};

//LOGIN.

void login(int *indice){
  while (1){
    printf("BEM VINDO!!\n");
    printf("Digite seu CPF: ");
    scanf("%11s", cpf);
    printf("Digite sua senha: ");
    scanf("%6s", senha);
    
    for (int i = 0; i < NUM_OF_USERS; i++) {
      if (strcmp(cpf_lista[i], cpf)== 0) {
        if (strcmp(senha_lista[i],senha)==0){
          printf("Login realizado com sucesso!\n");
          *indice = i;
          return;
        }

    
      
      }
    }
    printf("CPF ou senha incorretos!\n");
    
  }
}

//CONSULTAR O EXTRATO.

void extrato() {
    FILE *extratobanco;
    
    char linha[1000]; 

    extratobanco = fopen("extrato.bin", "rb");
    if (extratobanco == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return 1;
    }

    while (fgets(linha, sizeof(linha), extratobanco) != NULL) {

        char *espaco = strchr(linha, ' '); 
        if (espaco != NULL) {
            *espaco = '\0'; 

            if (strcmp(linha, cpf) == 0) {
                printf("%s\n", espaco + 1); 
            }
        }
    }

    fclose(extratobanco);
    printf("\n<--- volte com 'ENTER'\n");
    getchar(); 
    return 0;
}

//ATUALIZAÇÂO DAS CARTEIRAS (COLOCAR POR ULTIMO)
void atualizacao_das_carteiras(float *carteira,float *carteiraBit,float *carteiraEth,float *carteiraXrp){
     FILE *carteirafile;
     FILE *carteirabitfile;
     FILE *carteiraethfile;
     FILE *carteiraxrpfile;
     
     carteirafile = fopen("saldo.bin","wb");
     size_t escrevendo = fwrite(carteira, sizeof(float),10,carteirafile);
     fclose(carteirafile);

    carteirabitfile = fopen("saldobit.bin","wb");
     size_t escrevendobit = fwrite(carteiraBit, sizeof(float),10,carteirabitfile);
     fclose(carteirabitfile);
    carteiraethfile = fopen("saldoeth.bin","wb");
     size_t escrevendoeth = fwrite(carteiraEth, sizeof(float),10,carteiraethfile);
     fclose(carteiraethfile);
    carteiraxrpfile = fopen("saldoxrp.bin","wb");
     size_t escrevendoxrp = fwrite(carteiraXrp, sizeof(float),10,carteiraxrpfile);
     fclose(carteiraxrpfile);

}

int main()
{
	setlocale(LC_ALL, "portuguese");

	menu();
	
	system("pause");
	return 0;
}
void menu(){

	int cont;

	while(1){
		printf("Bem vindo ao menu!\n");
		printf("O que você deseja acessar?\n");
		printf("--------------------------\n");
		printf("1-Consultar saldo\n");
		printf("2-Consultar extrato\n");
		printf("3-Depositar reais\n");
		printf("4-Sacar reais\n");
		printf("5-Comprar criptomoedas:\n");
		printf("6-Vender criptomoedas\n");
		printf("7-Atualizar cotação\n");
		printf("8-Sair\n");
		scanf("%d", &cont);
		break;
	}
	    switch (cont){
			case 1:
				mostrarSaldo ();
				break;
			case 2:
				Consultar_extrato ();
				break;
			case 3:
				Depositar_reais ();
				break;
			case 4:
				Sacar_reais ();
				break;
			case 5:
				Comprar_criptomoedas ();
				break;
			case 6:
				Vender_criptomoedas ();
				break;
			case 7:
				Atualizar_cotacao ();
				break;
			case 8:
				atualizacao_das_carteiras(carteira,carteiraBit,carteiraEth,carteiraXrp);
				printf("DESCONECTANDO...");
				return 0;
		}
};
void Efetuar_login (){
	Cotacao_inicial();
};
void mostrarSaldo(int indice) {
    printf("-----------Saldo----------\n");
    printf("| REAIS: %.2f\n", carteira[indice]);
    printf("| BITCOIN: %.5f\n", carteiraBit[indice]);
    printf("| ETHEREUM: %.5f\n", carteiraEth[indice]);
    printf("| RIPPLE: %.5f\n", carteiraXrp[indice]);
    printf("--------------------------\n");
	
    printf("\n<--- volte com 'ENTER'\n");
    getchar(); 
    return 0;	
}
void Consultar_extrato (){
    printf("2\n");
};
void Depositar_reais (){
	printf("3\n");
};
void Sacar_reais (){
	printf("4\n");
};
void Comprar_criptomoedas (){
	
};
void Vender_criptomoedas (){
	printf("6\n");
};
void Cotacao_inicial (){
	srand(time(NULL));
	int i;
	for (i = 0; i < 3; i++) {
	        int num = rand() % 100;

		switch (i) {
	            case 0:
	                if (num % 2 == 0) {
	                    bit = bit + ((5 / 100.0) * bit);
	                } else {
	                    bit = bit - ((5 / 100.0) * bit);
	                }
	                break;
	
	            case 1:
	                if (num % 2 == 0) {
	                    eth = eth + ((5 / 100.0) * eth);
	                } else {
	                    eth = eth - ((5 / 100.0) * eth);
	                }
	                break;
	
	            case 2:
	                if (num % 2 == 0) {
	                    rip = rip + ((5 / 100.0) * rip);
	                } else {
	                    rip = rip - ((5 / 100.0) * rip);
	                }
	                break;
	
	            default:
	                break;
	        }
	}
};
void Atualiza_cotacao(int indice){
    	srand(time(NULL));

	int i;
	
	for (i = 0; i < 3; i++) {
	        int num = rand() % 100;

		switch (i) {
	            case 0:
	                if (num % 2 == 0) {
	                    bit = bit + ((5 / 100.0) * bit);
	                } else {
	                    bit = bit - ((5 / 100.0) * bit);
	                }
	                break;
	
	            case 1:
	                if (num % 2 == 0) {
	                    eth = eth + ((5 / 100.0) * eth);
	                } else {
	                    eth = eth - ((5 / 100.0) * eth);
	                }
	                break;
	
	            case 2:
	                if (num % 2 == 0) {
	                    rip = rip + ((5 / 100.0) * rip);
	                } else {
	                    rip = rip - ((5 / 100.0) * rip);
	                }
	                break;
	
	            default:
	                break;
	        }
	}
	printf("Bitcoin: %.2f\n", bit);
	printf("Ethereum: %.2f\n", eth);
	printf("Ripple: %.2f\n", rip);
	printf("\n")
	printf("Cotação atualizada\n");
	printf("\n<--- volte com 'ENTER'\n");
    	getchar(); 
    	return 0
};

